[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports; example, math equation \\(^2 + b^2 = c^2\\).","code":""},{"path":"index.html","id":"usage","chapter":"1 About","heading":"1.1 Usage","text":"bookdown chapter .Rmd file, .Rmd file can contain one (one) chapter. chapter must start first-level heading: # good chapter, can contain one (one) first-level heading.Use second-level higher headings within chapters like: ## short section ### even shorter section.index.Rmd file required, also first book chapter. homepage render book.","code":""},{"path":"index.html","id":"render-book","chapter":"1 About","heading":"1.2 Render book","text":"can render HTML version example book without changing anything:Find Build pane RStudio IDE, andFind Build pane RStudio IDE, andClick Build Book, select output format, select “formats” ’d like use multiple formats book source files.Click Build Book, select output format, select “formats” ’d like use multiple formats book source files.build book R console:render example PDF bookdown::pdf_book, ’ll need install XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":"\nbookdown::render_book()"},{"path":"index.html","id":"preview-book","chapter":"1 About","heading":"1.3 Preview book","text":"work, may start local server live preview HTML book. preview update edit book save individual .Rmd files. can start server work session using RStudio add-“Preview book”, R console:","code":"\nbookdown::serve_book()"},{"path":"coordinate-systems.html","id":"coordinate-systems","chapter":"2 Coordinate Systems","heading":"2 Coordinate Systems","text":"chapter, work following packages.\nstarting exercises, make sure run following code.","code":"\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(mapview)"},{"path":"coordinate-systems.html","id":"getting-started","chapter":"2 Coordinate Systems","heading":"2.1 Getting Started","text":"Coordinate Reference Systems (CRS)?\nCRS define spatial data projected onto Earth’s surface—essentially, locations curved Earth represented flat map.get sense CRS works practice, let’s explore dataset fish distributions North Carolina.\nregional dataset contains georeferenced sampling sites using longitude latitude coordinates.’ll start reading dataset data sub-directory R project:dataset contains following columns:Let’s take quick view dataframe:Since dataframe contains longitude latitude columns, can make data georeferenced.\n, ’ll need use functions sf package, makes mere numbers coordinates linked CRS choice.\nSpecifically, first convert original dataframe unique combinations logitude & latitude (= unique location) dplr::distinct() use sf::st_as_sf():looks similar tibble, version includes additional lines metadata describe key geospatial information.\ndata frame now represents point layer (see Geometry type), includes bounding box defines longitudinal latitudinal extent (Bounding box).\nalso specifies CRS use (Geodetic CRS).\nobject class now includes sf.data frame converted sf class, can apply variety spatial mapping functions available R.\nexample, can quickly visualize data using mapview::mapview() function:Fantastic — works!\nmarks important first step toward harnessing full potential RGIS.may save object using saveRDS() function R – , can load object later use (see Chapter 3):, heads-!\ndon’t fully understand CRS use, ’s high risk performing misinformed analyses — potentially serious enough invalidate conclusions. Therefore, ’s important take time understand several key aspects CRS conducting spatial analysis.\nOne difference Geodetic vs. Projected CRS. CRS used fish data example WGS 84, type geodetic CRS.","code":"\ndf_fish <- read_csv(\"data/data_finsync_nc.csv\")\nprint(df_fish)## # A tibble: 1,426 × 7\n##    site_id               year date         lon   lat latin              presence\n##    <chr>                <dbl> <date>     <dbl> <dbl> <chr>                 <dbl>\n##  1 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Clinostomus fundu…        1\n##  2 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Etheostoma flabel…        1\n##  3 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Hybopsis hypsinot…        1\n##  4 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Lepomis auritus           1\n##  5 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Moxostoma rupisca…        1\n##  6 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Nocomis leptoceph…        1\n##  7 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Notropis chilitic…        1\n##  8 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Semotilus atromac…        1\n##  9 finsync_nrs_nc-10014  2009 2009-06-03 -80.4  35.9 Clinostomus fundu…        1\n## 10 finsync_nrs_nc-10014  2009 2009-06-03 -80.4  35.9 Fundulus rathbuni         1\n## # ℹ 1,416 more rows\nsf_site <- df_fish %>% \n  distinct(site_id, lon, lat) %>% # get unique combinations of longitude & latitude\n  st_as_sf(coords = c(\"lon\", \"lat\"),\n           crs = 4326)\n\nprint(sf_site)## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##  * <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nclass(sf_site)## [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\nmapview(sf_site,\n        legend = FALSE)\nsaveRDS(sf_site,\n        file = \"data/sf_nc_county.rds\")"},{"path":"coordinate-systems.html","id":"geodetic-vs.-projected","chapter":"2 Coordinate Systems","heading":"2.2 Geodetic vs. Projected","text":"CRS essential accurately representing spatial data Earth’s surface.\ngeodetic CRS models Earth 3D ellipsoid represents locations using angular coordinates — latitude longitude.\nsystems ideal global positioning mapping preserving true geographic coordinates important.\nHowever, represent curved surfaces spherical model, suitable accurate distance area calculations flat maps.\nCommon examples geodetic CRS include WGS 84 (EPSG:4326), used GPS global datasets, NAD83 (EPSG:4269), widely used North America.contrast, projected CRS transforms geographic coordinates onto 2D surface using mathematical projections.\nallows accurate measurements distance, area, direction localized regions.\nProjected systems distort properties (e.g., shape, area, scale) can tailored specific mapping needs.\nExamples projected CRS include UTM zones (e.g., UTM Zone 17N, EPSG:32617) State Plane systems like North Carolina State Plane (EPSG:32119), optimized regional accuracy commonly used government environmental datasets.Visit website visual aids.Comparison geodetic projected CRS.Global coverage (e.g., GPS)Standard data exchange web mapsEasy interpret (lat/lon)distance, area, direction calculationsCurved surface ideal flat map operationsEnables accurate measurements (distance, area)Optimized regional analysisSupports specialized map projectionsDistorts geographic propertiesLimited specific regionsMust choose right projection purpose","code":""},{"path":"coordinate-systems.html","id":"crs-transformation","chapter":"2 Coordinate Systems","heading":"2.3 CRS transformation","text":"want perform spatial analysis data provided geodetic CRS, like fish data example?\nCan still calculate distances areas?\nfirst glance, might seem impossible — worries.\nThanks extensive work geospatial science, now well-established methods transforming CRS.example, suppose want calculate distance two sampling sites — say, first two rows data frame.Let’s walk using projected CRS.\nwant calculate distance two sites, can use sf::st_distance() function — transforming coordinates projected CRS1.\n, ’ll use UTM Zone 17N, well-suited projecting spatial data North Carolina.\n, ’ll apply sf::st_transform() convert geodetic CRS (e.g., WGS 84) projected CRS UTM Zone 17N based WGS 84 (EPSG:32617).Now, CRS metadata shows: Projected CRS: WGS 84 / UTM zone 17N.\n’ll also notice bounding box values changed large numbers (check st_bbox(sf_ft_utm)), clearly longitude latitude.’s coordinates now expressed meters, representing positions along X Y axes 2D projected map.\ntransformation complete, ’re ready perform geospatial analysis.Let’s start calculating distance two sampling sites:two sites \\(\\sim\\) 107 km away, shown matrix format.","code":"\nsf_ft_wgs <- sf_site %>% \n  slice(c(1, 2))\n\nprint(sf_ft_wgs)## Simple feature collection with 2 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -81.51025 ymin: 35.87616 xmax: -80.35989 ymax: 36.11188\n## Geodetic CRS:  WGS 84\n## # A tibble: 2 × 2\n##   site_id                          geometry\n##   <chr>                         <POINT [°]>\n## 1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n## 2 finsync_nrs_nc-10014 (-80.35989 35.87616)\nsf_ft_utm <- sf_ft_wgs %>% \n  st_transform(crs = 32617)\n\nprint(sf_ft_utm)## Simple feature collection with 2 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: 454077.2 ymin: 3970402 xmax: 557782.3 ymax: 3996478\n## Projected CRS: WGS 84 / UTM zone 17N\n## # A tibble: 2 × 2\n##   site_id                        geometry\n## * <chr>                       <POINT [m]>\n## 1 finsync_nrs_nc-10013 (454077.2 3996478)\n## 2 finsync_nrs_nc-10014 (557782.3 3970402)\nst_distance(sf_ft_utm)## Units: [m]\n##          1        2\n## 1      0.0 106933.3\n## 2 106933.3      0.0"},{"path":"coordinate-systems.html","id":"take-home","chapter":"2 Coordinate Systems","heading":"2.4 Take Home","text":"nutshell, geodetic CRS define locations mapped onto 3D model Earth (typically ellipsoid), preserving original latitude longitude values.\nProjected CRS, hand, define geographic locations transformed (“projected”) onto flat, 2D surface.\nHowever, projection can preserve spatial properties , must choose projected CRS based geometric attributes important analysis — area, distance, direction.\nAdditionally, projected CRS typically designed use within specific geographic regions, using one outside intended area can introduce significant distortion.","code":""},{"path":"vector-data-sf-basics.html","id":"vector-data-sf-basics","chapter":"3 Vector Data (sf basics)","heading":"3 Vector Data (sf basics)","text":"chapter, work following packages.\nstarting exercises, make sure run following code.Learning objectives:Understand data format vector dataUnderstand data format vector dataUnderstand types structures vector data (points, lines, polygons)Understand types structures vector data (points, lines, polygons)able produce map using vector dataBeing able produce map using vector dataBeing able manipulate vector dataBeing able manipulate vector data","code":"\nif (!require(pacman)) install.packages(\"packman\")\n\npacman::p_load(tidyverse,\n               sf,\n               mapview)"},{"path":"vector-data-sf-basics.html","id":"vector-data-in-gis","chapter":"3 Vector Data (sf basics)","heading":"3.1 Vector Data in GIS","text":"GIS, vector data one primary ways represent geographic features map.\nVector data uses geometric shapes – specifically points, lines, polygons – model real-world objects.vector feature can also carry attribute data, stored table linked spatial features.\nexample, polygon representing park might include attributes name, size, type vegetation.Vector data particularly useful representing clearly defined boundaries discrete features, allows detailed spatial analysis accurate map production.","code":""},{"path":"vector-data-sf-basics.html","id":"data-format","chapter":"3 Vector Data (sf basics)","heading":"3.1.1 Data format","text":"Traditionally, vector data stored ESRI Shapefile format (.shp).\nformat originally developed ESRI 1990s remains widely used across many GIS platforms.\nHowever, somewhat cumbersome single file; shapefiles require least four associated files (.shp, .shx, .dbf, .prj) function properly.\nfiles must kept together, makes file management sharing error-prone.recent years, GeoPackage format (.gpkg) gained popularity.\nsimplifies data storage combining necessary components single, portable file.context R, even better, vector data can also saved using native RDS format (.rds).\nformat cross-platform compatible GIS software, offers advantages within R: memory efficient often results smaller file sizes.\nreasons, book primarily uses .rds format storing vector data, unless compatibility external software requires otherwise.","code":""},{"path":"vector-data-sf-basics.html","id":"readexport-vector-data","chapter":"3 Vector Data (sf basics)","heading":"3.1.2 Read/Export vector data","text":"Since still common share data ESRI Shapefile format, ’ll start loading .shp file R.\n, ’ll save imported data .rds format simplify later steps workflow.sf::st_read() function sf package allows import shapefiles (.shp) well standard GIS formats.\nexercise, ’ll use county data North Carolina, saved data subdirectory – mentioned, data comes four associated files (check data subdirectory).first several lines output summarize contents sf object.\ncontains 100 features (rows), one attribute field geometry type MULTIPOLYGON (line Geometry type:), commonly used represent areas like counties.\ncoordinates XY two-dimensional (line Dimension:), bounding box shows spatial extent data (line Bounding box:).\ncoordinate reference system (CRS) WGS 84 (line Geodetic CRS:), common geographic CRS based latitude longitude.can export vector data using sf::st_write().\nfunction supports writing multiple formats, including Shapefile GeoPackage.\nCheck data subdirectory see exported files.use within R, often convenient save spatial data .rds format using saveRDS() function.\nformat compact efficient, making ideal storing intermediate results.\nKeep mind, however, .rds files compatible GIS software, ’ll need convert .shp .gpkg others using common GIS platforms.reload saved .rds file R, use readRDS() function.","code":"\n# read a shapefile (e.g., ESRI Shapefile format)\n# `quiet = TRUE` just for cleaner output\n(sf_nc_county <- st_read(dsn = \"data/nc.shp\",\n                         quiet = TRUE))## Simple feature collection with 100 features and 1 field\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##         county                       geometry\n## 1         ashe MULTIPOLYGON (((-81.47258 3...\n## 2    alleghany MULTIPOLYGON (((-81.23971 3...\n## 3        surry MULTIPOLYGON (((-80.45614 3...\n## 4    currituck MULTIPOLYGON (((-76.00863 3...\n## 5  northampton MULTIPOLYGON (((-77.21736 3...\n## 6     hertford MULTIPOLYGON (((-76.74474 3...\n## 7       camden MULTIPOLYGON (((-76.00863 3...\n## 8        gates MULTIPOLYGON (((-76.56218 3...\n## 9       warren MULTIPOLYGON (((-78.30849 3...\n## 10      stokes MULTIPOLYGON (((-80.02545 3...\n# save as shapefile (overwrites by setting append = FALSE)\nst_write(sf_nc_county, \n         dsn = \"data/sf_nc_county.shp\",\n         append = FALSE)\n\n# save as Geopackage (overwrites by setting append = FALSE)\nst_write(sf_nc_county, \n         dsn = \"data/sf_nc_county.gpkg\",\n         append = FALSE)\n# save as an RDS file (compact and efficient for use within R)\nsaveRDS(sf_nc_county,\n        file = \"data/sf_nc_county.rds\")\n# read from an RDS file\nsf_nc_county <- readRDS(file = \"data/sf_nc_county.rds\")"},{"path":"vector-data-sf-basics.html","id":"point","chapter":"3 Vector Data (sf basics)","heading":"3.1.3 Point","text":"Points represent discrete locations area length, location weather station, tree, city.\npoint pair coordinates (latitude longitude x y) indicate position.sample data used Chapter 2 example point vector layer.\nLet’s take closer look dataset (saved data/sf_finsync_nc.rds shared repository).examine geometry column, ’ll see contains pairs latitude longitude values notation <POINT [°]>, specify location site.\nUsing geographic information, visualized survey sites map Chapter 2.1.\ncan map data mapview::mapview() function:","code":"\n(sf_site <- readRDS(\"data/sf_finsync_nc.rds\"))## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##    <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nmapview(sf_site,\n        col.regions = \"black\", # point's fill color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"line","chapter":"3 Vector Data (sf basics)","heading":"3.1.4 Line","text":"Lines (also called polylines) represent linear features roads, rivers, trails.\nline consists sequence connected points may include curves bends.\nLines length, area.Stream lines example line geometries.\nuse sample dataset stored data/sf_stream.rds, illustrate stream networks within Guilford county, NC.\ncan load inspect R follows:contrast point vector layer introduced earlier, dataset’s geometry column contains notation LINESTRING, indicating features represent linear geometries—specifically, stream segments.\nLet’s visualize data better understand structure:","code":"\n(sf_str <- readRDS(\"data/sf_stream.rds\"))## Simple feature collection with 5012 features and 1 field\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: -80.04671 ymin: 35.9001 xmax: -79.53284 ymax: 36.25706\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                          geometry       fid\n## 1  LINESTRING (-79.90748 36.18... fid000001\n## 2  LINESTRING (-79.89768 36.20... fid000002\n## 3  LINESTRING (-79.94756 36.15... fid000003\n## 4  LINESTRING (-79.94152 36.25... fid000004\n## 5  LINESTRING (-79.94206 36.20... fid000005\n## 6  LINESTRING (-79.90003 36.18... fid000006\n## 7  LINESTRING (-79.94737 36.20... fid000007\n## 8  LINESTRING (-79.87595 36.18... fid000008\n## 9  LINESTRING (-79.88022 36.25... fid000009\n## 10 LINESTRING (-79.94859 36.25... fid000010\nmapview(sf_str,\n        color = \"steelblue\", # line's color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"polygon","chapter":"3 Vector Data (sf basics)","heading":"3.1.5 Polygon","text":"Polygons represent areas lakes, parks, country boundaries.\npolygon formed closed sequence lines define perimeter, allowing enclose space area shape.\nexample, ’ll use county-level polygon data North Carolina.\nRecall data/sf_nc_county.rds exported Section 3.1.2:geometry column, ’ll notice notation MULTIPOLYGON, indicates feature consists one connected polygons.\nclassified polygon vectors GIS commonly used represent areas defined boundaries.\nLet’s visualize polygons well:","code":"\n(sf_nc_county <- readRDS(\"data/sf_nc_county.rds\"))## Simple feature collection with 100 features and 1 field\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##         county                       geometry\n## 1         ashe MULTIPOLYGON (((-81.47258 3...\n## 2    alleghany MULTIPOLYGON (((-81.23971 3...\n## 3        surry MULTIPOLYGON (((-80.45614 3...\n## 4    currituck MULTIPOLYGON (((-76.00863 3...\n## 5  northampton MULTIPOLYGON (((-77.21736 3...\n## 6     hertford MULTIPOLYGON (((-76.74474 3...\n## 7       camden MULTIPOLYGON (((-76.00863 3...\n## 8        gates MULTIPOLYGON (((-76.56218 3...\n## 9       warren MULTIPOLYGON (((-78.30849 3...\n## 10      stokes MULTIPOLYGON (((-80.02545 3...\nmapview(sf_nc_county,\n        col.regions = \"grey\", # polygon's fill color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"mapping","chapter":"3 Vector Data (sf basics)","heading":"3.1.6 Mapping","text":"visualize various types vector data together, can use ggplot2 package geom_sf() function, natively supports spatial features.’ll start plotting just polygon layer show county boundaries:Next, add line layer, represents stream networks, top county polygons:Finally, add point layer map, marks survey sites.\ncompletes map showing three vector types together:","code":"\nggplot() +\n  geom_sf(data = sf_nc_county)\nggplot() +\n  geom_sf(data = sf_nc_county) +\n  geom_sf(data = sf_str)\nggplot() +\n  geom_sf(data = sf_nc_county) +\n  geom_sf(data = sf_str) +\n  geom_sf(data = sf_site)"},{"path":"vector-data-sf-basics.html","id":"spatial-data-manipulation","chapter":"3 Vector Data (sf basics)","heading":"3.2 Spatial Data Manipulation","text":"","code":""},{"path":"vector-data-sf-basics.html","id":"spatial-join","chapter":"3 Vector Data (sf basics)","heading":"3.2.1 Spatial join","text":"map created earlier provides good overview, may appear odd stream network available Guilford County, yet layers (survey sites county boundaries) span entire state.\nbetter align spatial representation, might want focus Guilford County across layers.narrow survey sites fall within Guilford County, can use sf::st_join() function sf package.\nfunction performs spatial join, associating attributes one layer (e.g., counties) another (e.g., point locations) based geographic overlap., overlay sf_site (survey sites) sf_nc_county (county polygons) attach county information point:original sf_site data, column identifying county site:running st_join(), resulting object sf_site_join now includes additional attributes county layer (county column):column isn’t randomly assigned; reflects actual geographic relationship: survey site inherits attributes county polygon falls within, based spatial coordinates.Now survey site county identifier, can easily subset points located within Guilford County using familiar tidyverse syntax:can also extract just Guilford County polygon full county dataset:filtered layers, can re-create map – time focusing exclusively Guilford County associated stream network survey sites:wish, can customize colors layer apply clean base theme enhance appearance:","code":"\nsf_site_join <- st_join(x = sf_site, # base layer\n                        y = sf_nc_county) # overlaying layer\nprint(sf_site)## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##    <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nprint(sf_site_join)## Simple feature collection with 122 features and 2 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 3\n##    site_id                          geometry county     \n##  * <chr>                         <POINT [°]> <chr>      \n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188) wilkes     \n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616) davidson   \n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379) burke      \n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822) buncombe   \n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553) greene     \n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467) clay       \n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119) mecklenburg\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917) avery      \n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365) union      \n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249) pender     \n## # ℹ 112 more rows\nsf_site_guilford <- sf_site_join %>% \n  filter(county == \"guilford\")\nsf_nc_guilford <- sf_nc_county %>% \n  filter(county == \"guilford\")\nggplot() +\n  geom_sf(data = sf_nc_guilford) +\n  geom_sf(data = sf_str) +\n  geom_sf(data = sf_site_guilford)\nggplot() +\n  geom_sf(data = sf_nc_guilford) +\n  geom_sf(data = sf_str,\n          color = \"steelblue\") +\n  geom_sf(data = sf_site_guilford,\n          color = \"salmon\") +\n  theme_bw()"},{"path":"vector-data-sf-basics.html","id":"geometric-analysis","chapter":"3 Vector Data (sf basics)","heading":"3.2.2 Geometric analysis","text":"vector data analysis, can perform various geometric operations calculating length polylines area polygons.\nHowever, ’s important ensure data using appropriate CRS geometric computations assume features laid flat, two-dimensional space – geodetic CRS used.\ncases, recommended transform data projected CRS suitable region interest.","code":""},{"path":"vector-data-sf-basics.html","id":"length","chapter":"3 Vector Data (sf basics)","heading":"Length","text":"calculate length polylines, can use sf::st_length() function.\n, ’s important transform data projected CRS.\ncase, ’ll use WGS 84 / UTM Zone 17N (EPSG:32617), appropriate sample data (North Carolina, USA).\ncan use st_transform() reproject spatial object sf_str UTM Zone 17N coordinate reference system (EPSG:32617).transformation ensures length calculations performed meters.object v_str_l contains length stream segment, order features sf_str_proj.\ncan attach directly spatial object new column using dplyr::mutate().\nallows us retain geometry calculated lengths within single data frame structure.Now, feature sf_str_w_len includes corresponding length attribute, making easier visualize analyze within spatial object.Alternatively, process can done single step combining mutate() st_length() directly.","code":"\n(sf_str_proj <- st_transform(sf_str, crs = 32617))## Simple feature collection with 5012 features and 1 field\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: 585999.8 ymin: 3973842 xmax: 631847 ymax: 4012897\n## Projected CRS: WGS 84 / UTM zone 17N\n## First 10 features:\n##                          geometry       fid\n## 1  LINESTRING (598237.5 400502... fid000001\n## 2  LINESTRING (599098.8 400681... fid000002\n## 3  LINESTRING (594668 4001798,... fid000003\n## 4  LINESTRING (595096.9 401232... fid000004\n## 5  LINESTRING (595099.3 400762... fid000005\n## 6  LINESTRING (598901.7 400556... fid000006\n## 7  LINESTRING (594624.7 400737... fid000007\n## 8  LINESTRING (601073.4 400501... fid000008\n## 9  LINESTRING (600602.6 401252... fid000009\n## 10 LINESTRING (594459.4 401249... fid000010\nv_str_l <- st_length(sf_str_proj)\n\n# print the first 10 elements\nhead(v_str_l)## Units: [m]\n## [1]   38.45906 2889.03070  145.59723  289.01825  323.75021  237.89378\n(sf_str_w_len <- sf_str %>% \n  mutate(length = v_str_l))## Simple feature collection with 5012 features and 2 fields\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: -80.04671 ymin: 35.9001 xmax: -79.53284 ymax: 36.25706\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                          geometry       fid         length\n## 1  LINESTRING (-79.90748 36.18... fid000001   38.45906 [m]\n## 2  LINESTRING (-79.89768 36.20... fid000002 2889.03070 [m]\n## 3  LINESTRING (-79.94756 36.15... fid000003  145.59723 [m]\n## 4  LINESTRING (-79.94152 36.25... fid000004  289.01825 [m]\n## 5  LINESTRING (-79.94206 36.20... fid000005  323.75021 [m]\n## 6  LINESTRING (-79.90003 36.18... fid000006  237.89378 [m]\n## 7  LINESTRING (-79.94737 36.20... fid000007  162.69751 [m]\n## 8  LINESTRING (-79.87595 36.18... fid000008 1066.18503 [m]\n## 9  LINESTRING (-79.88022 36.25... fid000009  624.27443 [m]\n## 10 LINESTRING (-79.94859 36.25... fid000010  175.48170 [m]\nsf_str_w_len <- sf_str %>% \n  st_transform(crs = 32617) %>%       # transform to projected CRS (utm zone 17n) for accurate length calculation\n  mutate(length = st_length(.)) %>%   # calculate length of each feature and store it in a new column\n  st_transform(crs = 4326)           # transform back to geographic CRS (wgs84) for consistency with other layers\n\n# # the above code returns identical results with the code below\n# sf_str_proj <- st_transform(sf_str, crs = 32617)\n# v_str_l <- st_length(sf_str_proj)               \n# sf_str <- sf_str %>% \n#   mutate(length = v_str_l)                      "},{"path":"vector-data-sf-basics.html","id":"area","chapter":"3 Vector Data (sf basics)","heading":"Area","text":"area polygons can calculated similar manner using sf::st_area() function.\n, forget CRS transformation performing geometric calculations., apply st_area() projected polygon data:saw example stream polylines, object v_area contains area county.\nLet’s attach directly spatial object new column using dplyr::mutate() .Good, now feature sf_nc_county_w_area includes corresponding area attribute.\nprocess can done single step well.","code":"\n(sf_nc_county_proj <- st_transform(sf_nc_county, crs = 32617))## Simple feature collection with 100 features and 1 field\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: 196602 ymin: 3751723 xmax: 1002267 ymax: 4057841\n## Projected CRS: WGS 84 / UTM zone 17N\n## First 10 features:\n##         county                       geometry\n## 1         ashe MULTIPOLYGON (((457533.8 40...\n## 2    alleghany MULTIPOLYGON (((478495.8 40...\n## 3        surry MULTIPOLYGON (((548866.7 40...\n## 4    currituck MULTIPOLYGON (((948208.3 40...\n## 5  northampton MULTIPOLYGON (((839954.7 40...\n## 6     hertford MULTIPOLYGON (((882486.8 40...\n## 7       camden MULTIPOLYGON (((948208.3 40...\n## 8        gates MULTIPOLYGON (((898362.4 40...\n## 9       warren MULTIPOLYGON (((741807.4 40...\n## 10      stokes MULTIPOLYGON (((587556.5 40...\nv_area <- st_area(sf_nc_county)\n\n# print the first 10 elements\nhead(v_area)## Units: [m^2]\n## [1] 1137120798  610923161 1423161473  694386434 1520383764  967515296\n(sf_nc_county_w_area <- sf_nc_county %>% \n  mutate(area = v_area))## Simple feature collection with 100 features and 2 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##         county                       geometry             area\n## 1         ashe MULTIPOLYGON (((-81.47258 3... 1137120798 [m^2]\n## 2    alleghany MULTIPOLYGON (((-81.23971 3...  610923161 [m^2]\n## 3        surry MULTIPOLYGON (((-80.45614 3... 1423161473 [m^2]\n## 4    currituck MULTIPOLYGON (((-76.00863 3...  694386434 [m^2]\n## 5  northampton MULTIPOLYGON (((-77.21736 3... 1520383764 [m^2]\n## 6     hertford MULTIPOLYGON (((-76.74474 3...  967515296 [m^2]\n## 7       camden MULTIPOLYGON (((-76.00863 3...  615801604 [m^2]\n## 8        gates MULTIPOLYGON (((-76.56218 3...  903433860 [m^2]\n## 9       warren MULTIPOLYGON (((-78.30849 3... 1179078729 [m^2]\n## 10      stokes MULTIPOLYGON (((-80.02545 3... 1232489004 [m^2]\nsf_nc_county_w_area <- sf_nc_county %>% \n  st_transform(crs = 32617) %>%       # transform to projected CRS (utm zone 17n) for accurate area calculation\n  mutate(area = st_area(.)) %>%       # calculate area of each polygon and store it in a new column\n  st_transform(crs = 4326)            # transform back to geographic CRS (wgs84) for consistency with other layers"},{"path":"raster-data-terra-basics.html","id":"raster-data-terra-basics","chapter":"4 Raster Data (terra basics)","heading":"4 Raster Data (terra basics)","text":"chapter, work following packages.\nstarting exercises, make sure run following code.","code":"\nif (!require(pacman)) install.packages(\"packman\")\n\npacman::p_load(tidyverse,\n               terra,\n               tidyterra)"},{"path":"raster-data-terra-basics.html","id":"raster-data-in-gis","chapter":"4 Raster Data (terra basics)","heading":"4.1 Raster Data in GIS","text":"Raster data GIS represents geographic information grid pixels (cells), cell value corresponding specific attribute elevation, temperature, land cover type.\nUnlike vector data (points, lines, polygons), raster data particularly well-suited continuous phenomena vary smoothly across space.\nresolution raster determined size cells, smaller cells providing finer detail.\nRaster datasets often used environmental modeling, remote sensing, climate analysis, can efficiently represent large-scale spatial patterns.terra package R modern tool handling raster (vector spatial data), designed replace older raster package faster performance intuitive syntax.\nallows users read, write, manipulate, analyze raster datasets various formats (e.g., GeoTIFF, NetCDF) supports integration vector data sf sp packages.","code":""},{"path":"raster-data-terra-basics.html","id":"data-format-1","chapter":"4 Raster Data (terra basics)","heading":"4.1.1 Data format","text":"GeoTIFF commonly used raster file format GIS stores image data along georeferencing information.\n, data tells software image belongs Earth’s surface.\nUnlike regular TIFF image, GeoTIFF includes embedded metadata CRS, map projection, pixel size, spatial extent.","code":""},{"path":"raster-data-terra-basics.html","id":"readexport-raster-data","chapter":"4 Raster Data (terra basics)","heading":"4.1.2 Read/Export raster data","text":"context using terra package R, GeoTIFFs (.tif) standard input output format raster analysis.\nexample, can load GeoTIFF containing data using terra::rast(), may perform spatial operations cropping masking.output summarizes contents SpatRaster object.\n90 rows 95 columns, forming grid raster cells (line dimensions:), one data layer (band).\ncell represents rectangular area 0.008333333 degrees x (longitude) y (latitude) directions (line resolution:).\nspatial extent raster defined minimum maximum coordinates directions (line extent:), covering small area Western Europe specific data.\nCRS WGS 84 (line coord. ref.), uses geographic coordinates (longitude latitude).\nraster contains elevation data (line name:), values ranging 141 547 (lines min value: max value:) meters.raster object R can exported using terra::writeRaster():object now saved spr_elev.tif data subdirectory, specified filename argument.\nEasy enough!","code":"\n(spr_ex <- rast(\"data/spr_example.tif\"))## class       : SpatRaster \n## dimensions  : 90, 95, 1  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : 5.741667, 6.533333, 49.44167, 50.19167  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : spr_example.tif \n## name        : elevation \n## min value   :       141 \n## max value   :       547\n# overwrite = TRUE enables overwriting\nwriteRaster(x = spr_ex, \n            filename = \"data/spr_elev.tif\",\n            overwrite = TRUE)"},{"path":"raster-data-terra-basics.html","id":"mapping-1","chapter":"4 Raster Data (terra basics)","heading":"4.1.3 Mapping","text":"Unlike sf vector objects, raster data natively supported ggplot2 direct visualization.\nmeans typical ggplot2 functions like geom_sf() won’t work box raster layers.Fortunately, tidyterra package extends ggplot2 providing functions designed specifically raster visualization.\n, can use tidyterra::geom_spatraster() display raster data ggplot2-friendly format.\nfollowing example, ’ll use geom_spatraster() visualize raster file spr_ex previously loaded R.","code":"\nggplot() +\n  geom_spatraster(data = spr_ex)"},{"path":"raster-data-terra-basics.html","id":"crop","chapter":"4 Raster Data (terra basics)","heading":"4.2 Crop","text":"crop() function useful tool trimming raster layer defined extent.\nparticularly helpful working large raster files, can slow process visualize.","code":""},{"path":"raster-data-terra-basics.html","id":"given-extent","chapter":"4 Raster Data (terra basics)","heading":"4.2.1 Given extent","text":"see cropping works, let’s start loading precipitation dataset.\nraster product CHELSA (Climatologies High resolution Earth’s Land Surface Areas):inspect spatial extent raster, can use terra::ext() function terra package.\nhelps us understand geographic coverage cropping.layer covers entire US, ’s pretty big raster (check geom_spatraster()).crop raster, provide bounding box area want retain.\nexample , keep area bounded longitudes -80 -75 latitudes 34 37.selected area partially covers North Carolina.\nHowever, since ’s little difficult imagine raster spans geographically, load vector dataset North Carolina counties.\ncan overlay raster vector data get better sense geographic coverage.resulting plot reveals raster vector extents perfectly align.","code":"\n(spr_prec <- rast(\"data/spr_prec_us.tif\"))## class       : SpatRaster \n## dimensions  : 3000, 6972, 1  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : -125.0001, -66.90014, 24.49986, 49.49986  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : spr_prec_us.tif \n## name        : precipitation \n## min value   :          49.8 \n## max value   :        5765.7\next(spr_prec)## SpatExtent : -125.00013910885, -66.90013934125, 24.49986065315, 49.49986055315 (xmin, xmax, ymin, ymax)\n## crop to:\n## longitude range: -80 to -75\n## latitude range: 34 to 37\nspr_prec_crop <- crop(x = spr_prec,\n                      y = c(-80, -75, 34, 37))\n## load county vector \nsf_nc_county <- readRDS(\"data/sf_nc_county.rds\")\n\nggplot() +\n  geom_spatraster(data = spr_prec_crop) +\n  geom_sf(data = sf_nc_county,\n          alpha = 0.25) ## alpha = 0.25 makes the polygon layer transparent"},{"path":"raster-data-terra-basics.html","id":"vector-extent","chapter":"4 Raster Data (terra basics)","heading":"4.2.2 Vector extent","text":"later analyses, ’s common work raster vector data together, ’s helpful know crop raster layer using spatial extent vector object.following example, crop raster using extent sf_nc_county object, ensures spatial extents two datasets match.Let’s visualize cropped raster vector data together confirm now align correctly.","code":"\nspr_prec_nc <- crop(x = spr_prec,\n                    y = sf_nc_county)\nggplot() +\n  geom_spatraster(data = spr_prec_nc) +\n  geom_sf(data = sf_nc_county,\n          alpha = 0.25) ## alpha = 0.25 makes the polygon layer transparent"},{"path":"raster-data-terra-basics.html","id":"merge","chapter":"4 Raster Data (terra basics)","heading":"4.3 Merge","text":"merge() function performs opposite crop(): combines multiple raster layers single, unified raster.\noperation essential working large geographic datasets span multiple tiles.\nexample, need calculate summary statistics within polygon boundary crosses several raster layers, rasters must first merged ensure statistics computed accurately across entire area interest.","code":""},{"path":"raster-data-terra-basics.html","id":"two-tiles","chapter":"4 Raster Data (terra basics)","heading":"4.3.1 Two tiles","text":"try merge() function, ’ll use set precipitation raster tiles, representing one quarter North Carolina., can use geom_spatraster() visual check:Check layers (spr_ne, spr_sw, spr_se) – one covers different quarter North Carolina.individual tiles useful , e.g., county-level analysis, fall short want perform statewide analysis.\nMerging two tiles single raster straightforward using merge() function.spr_n layer combination northern tiles now cover northern half state.","code":"\nspr_nw <- rast(\"data/spr_prec_ncnw.tif\") # Northwest NC\nspr_ne <- rast(\"data/spr_prec_ncne.tif\") # Northeast NC\nspr_sw <- rast(\"data/spr_prec_ncsw.tif\") # Southwest NC\nspr_se <- rast(\"data/spr_prec_ncse.tif\") # Southeast NC\nggplot() +\n  geom_spatraster(data = spr_nw) +\n  geom_sf(data = sf_nc_county,\n          alpha = 0.25)\nspr_n <- merge(spr_nw, spr_ne)\nggplot() +\n  geom_spatraster(data = spr_n) +\n  geom_sf(data = sf_nc_county,\n          alpha = 0.25)"},{"path":"raster-data-terra-basics.html","id":"more-than-two-tiles","chapter":"4 Raster Data (terra basics)","heading":"4.3.2 More than two tiles","text":"wish merge two raster tiles , ’s often efficient use SpatRaster Collection.\nallows us organize multiple SpatRaster objects single collection can handled functions like merge() easily.First, gather individual tiles list:, convert list SpatRasterCollection using terra::sprc() function:Now raster collection, can merge tiles single, unified raster layer:final merged raster covers entire extent North Carolina.","code":"\nlist_spr <- list(spr_nw,\n                 spr_ne,\n                 spr_sw,\n                 spr_se)\nspr_col <- sprc(list_spr)\nspr_merge <- merge(spr_col)\nggplot() +\n  geom_spatraster(data = spr_merge) +\n  geom_sf(data = sf_nc_county,\n          alpha = 0.25)"},{"path":"raster-data-terra-basics.html","id":"stack","chapter":"4 Raster Data (terra basics)","heading":"4.4 Stack","text":"multiple raster layers extent resolution, can “stack” single object joint analysis.\nstacked raster particularly useful working multiple environmental variables simultaneously—temperature, precipitation, elevation.\napproach allows us perform cell--cell operations across layers.\nSee Chapter XX details.\n5., ’ll work precipitation temperature layers CHELSA create stacked raster.\nSince layers share extent resolution, represent ideal case stacking.\nLet’s begin loading layers R.raster object currently contains single layer data.\ncan print object inspect contents—sure check spr_prec_nc spr_tmp_nc examples.Stacking raster layers simple - can use c() function - just like creating vector.output shows stacked raster object class SpatRaster contains two layers—indicated nlyr: 2.\nlayer corresponds different environmental variable: precipitation temperature, listed names field.raster consistent spatial structure, 325 rows 1064 columns, resolution approximately 0.0083 degrees directions.raster consistent spatial structure, 325 rows 1064 columns, resolution approximately 0.0083 degrees directions.layers share extent coordinate reference system (EPSG:4326), requirement stacking.layers share extent coordinate reference system (EPSG:4326), requirement stacking.sources, can see original file names (spr_prec_nc.tif spr_tmp_nc.tif) combined.sources, can see original file names (spr_prec_nc.tif spr_tmp_nc.tif) combined.min values max values show data range variable.min values max values show data range variable.layers perfectly aligned, stacking allows cell--cell analysis across variables, useful modeling, classification, multivariate environmental analyses.can access layer separately using $ operator – returns output spr_prec_nc.","code":"\nspr_prec_nc <- rast(\"data/spr_prec_nc.tif\")\nspr_tmp_nc <- rast(\"data/spr_tmp_nc.tif\")\n# print precipitation layer - do the same for spr_tmp_nc as well!\nprint(spr_prec_nc)## class       : SpatRaster \n## dimensions  : 325, 1064, 1  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : -84.32514, -75.45847, 33.88319, 36.59153  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : spr_prec_nc.tif \n## name        : precipitation \n## min value   :         975.5 \n## max value   :        2668.2\n(spr_pt_nc <- c(spr_prec_nc,\n                spr_tmp_nc))## class       : SpatRaster \n## dimensions  : 325, 1064, 2  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : -84.32514, -75.45847, 33.88319, 36.59153  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## sources     : spr_prec_nc.tif  \n##               spr_tmp_nc.tif  \n## names       : precipitation, temperature \n## min values  :         975.5,        5.15 \n## max values  :        2668.2,       21.15\n# precipitation\nspr_pt_nc$precipitation## class       : SpatRaster \n## dimensions  : 325, 1064, 1  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : -84.32514, -75.45847, 33.88319, 36.59153  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : spr_prec_nc.tif \n## name        : precipitation \n## min value   :         975.5 \n## max value   :        2668.2"},{"path":"raster-data-terra-basics.html","id":"reprojection","chapter":"4 Raster Data (terra basics)","heading":"4.5 Reprojection","text":"raster data, use terra::project() change CRS.\ntry , let’s use precipitation data North Carolina.\nlayer originally defined geodetic CRS, WGS84, specified source data (see line coord. ref.).can reproject projected CRS using project() function.\nNote , unlike sf::st_transform(), terra::project() requires EPSG code supplied format \"EPSG:XXXX\".coord. ref. now says WGS 84 / UTM zone 17N (EPSG:32617)","code":"\nprint(spr_prec_nc)## class       : SpatRaster \n## dimensions  : 325, 1064, 1  (nrow, ncol, nlyr)\n## resolution  : 0.008333333, 0.008333333  (x, y)\n## extent      : -84.32514, -75.45847, 33.88319, 36.59153  (xmin, xmax, ymin, ymax)\n## coord. ref. : lon/lat WGS 84 (EPSG:4326) \n## source      : spr_prec_nc.tif \n## name        : precipitation \n## min value   :         975.5 \n## max value   :        2668.2\n(spr_prec_nc_proj <- project(x = spr_prec_nc,\n                             y = \"EPSG:32617\"))## class       : SpatRaster \n## dimensions  : 407, 1060, 1  (nrow, ncol, nlyr)\n## resolution  : 774.027, 774.027  (x, y)\n## extent      : 192445.1, 1012914, 3748853, 4063882  (xmin, xmax, ymin, ymax)\n## coord. ref. : WGS 84 / UTM zone 17N (EPSG:32617) \n## source(s)   : memory\n## name        : precipitation \n## min value   :      976.9659 \n## max value   :     2668.0034"},{"path":"raster-data-terra-basics.html","id":"resampling","chapter":"4 Raster Data (terra basics)","heading":"4.5.1 Resampling","text":"reprojection raster data may seem straightforward, involves important details; particularly resampling raster values.\nraster reprojected, grid cells re-aligned fit new CRS.\nHowever, new grid typically align perfectly original one.\nresult, new cell centers may fall original cell locations, creating overlaps gaps require estimation.estimation process known resampling, determines values original raster reassigned new grid.\nexample, might assign new cell value nearest original cell (nearest-neighbor method), compute weighted average surrounding cells (bilinear cubic interpolation).\nchoice resampling method depends type data desired balance accuracy efficiency.\nfollowing list provides key methods resampling:Nearest neighbor simplest resampling method.\nassigns new cell value closest cell original raster without averaging.\nmethod best used categorical data (e.g., land cover types habitat classes) preserving exact values essential.\nused continuous data.Nearest neighbor simplest resampling method.\nassigns new cell value closest cell original raster without averaging.\nmethod best used categorical data (e.g., land cover types habitat classes) preserving exact values essential.\nused continuous data.Bilinear interpolation estimates new cell value taking weighted average four nearest original cells.\nproduces smoother results nearest neighbor well-suited continuous data temperature, elevation, precipitation.\nused categorical data.Bilinear interpolation estimates new cell value taking weighted average four nearest original cells.\nproduces smoother results nearest neighbor well-suited continuous data temperature, elevation, precipitation.\nused categorical data.Cubic interpolation uses 16 surrounding cells calculate smoother, refined estimate new values.\n’s appropriate continuous data visual smoothness gradient preservation important, elevation models remote sensing imagery.\naccurate smooth surfaces, slower may oversmooth sharp transitions.Cubic interpolation uses 16 surrounding cells calculate smoother, refined estimate new values.\n’s appropriate continuous data visual smoothness gradient preservation important, elevation models remote sensing imagery.\naccurate smooth surfaces, slower may oversmooth sharp transitions.default, terra::project() applies nearest neighbor method (method = \"near\") input raster contains discrete data, uses bilinear interpolation (method = \"bilinear\") continuous data.\noptions available, can specify method argument function (see ?terra::project details).","code":""},{"path":"raster-data-terra-basics.html","id":"non-reversible","chapter":"4 Raster Data (terra basics)","heading":"4.5.2 Non-reversible","text":"must aware key differences vector data regarding reprojection.\nvector data, coordinate transformations generally reversible, meaning reproject vector layer new CRS transform back original CRS, geometries retain original coordinates high precision.\npossible vector data (points, lines, polygons) defined discrete coordinate values, can precisely transformed using mathematical rules without interpolation.contrast, raster reprojection terra::project() reversible.\nraster data consist grid cells, reprojecting, cell values must resampled fit new grid layout target CRS.\ninvolves interpolation (e.g., bilinear nearest-neighbor methods), can introduce small changes smoothing data.\nresult, reprojecting raster new CRS back original CRS perfectly recover original values alignment.","code":""},{"path":"vector-raster-interactions.html","id":"vector-raster-interactions","chapter":"5 Vector-Raster Interactions","heading":"5 Vector-Raster Interactions","text":"chapter, work following packages.\nstarting exercises, make sure run following code.","code":"\nif (!require(pacman)) install.packages(\"packman\")\n\npacman::p_load(tidyverse,\n               sf,\n               terra,\n               tidyterra,\n               exactextractr)"},{"path":"vector-raster-interactions.html","id":"interations-between-vector-and-raster-data","chapter":"5 Vector-Raster Interactions","heading":"5.1 Interations between Vector and Raster Data","text":"","code":"\n## finsync survey site\nsf_site <- readRDS(\"data/sf_finsync_nc.rds\")\n\n## county polygons\nsf_nc_county <- readRDS(\"data/sf_nc_county.rds\")\n\n## precipitation raster\nspr_prec_nc <- rast(\"data/spr_prec_nc.tif\")"},{"path":"vector-raster-interactions.html","id":"point-wise-extraction","chapter":"5 Vector-Raster Interactions","heading":"5.2 Point-wise Extraction","text":"Let’s perform point-wise extraction precipitation values survey site locations.\nexplore spatial patterns get sense data, first visualize raster precipitation data using tidyterra::geom_spatraster() overlay survey sites using ggplot2::geom_sf().extract raster values survey sites, use terra::extract() function.\nfunction retrieves values one raster layers locations specified spatial vector data, points polygons.\ncase, return precipitation value survey site location.Since output terra::extract() bind = TRUE class SpatVector includes geometry yet sf object, convert back sf object using sf::st_as_sf() (using %>%, steps can done one step).allows seamless spatial operations visualization downstream.\nSince point data now include precipitation values, can represent survey sites colors reflect precipitation gradient.","code":"\nggplot() +\n  geom_spatraster(data = spr_prec_nc) +\n  geom_sf(data = sf_site) +\n  scale_fill_viridis_c() + # change color palette for raster\n  theme_bw()\n# # The following code works exactly as:\n# spr_site_prec <- extract(x = spr_prec_nc,\n#                          y = sf_site,\n#                          bind = TRUE)\n# \n# sf_site_prec <- st_as_sf(spr_site_prec)\n\n(sf_site_prec <- extract(x = spr_prec_nc,\n                         y = sf_site,\n                         bind = TRUE) %>% \n   st_as_sf())## Simple feature collection with 122 features and 2 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                 site_id precipitation                   geometry\n## 1  finsync_nrs_nc-10013        1349.4 POINT (-81.51025 36.11188)\n## 2  finsync_nrs_nc-10014        1121.5 POINT (-80.35989 35.87616)\n## 3  finsync_nrs_nc-10020        1297.3 POINT (-81.74472 35.64379)\n## 4  finsync_nrs_nc-10023        1162.0  POINT (-82.77898 35.6822)\n## 5  finsync_nrs_nc-10024        1302.0 POINT (-77.75384 35.38553)\n## 6  finsync_nrs_nc-10027        1741.5 POINT (-83.69678 35.02467)\n## 7  finsync_nrs_nc-10029        1224.3 POINT (-80.65668 35.16119)\n## 8  finsync_nrs_nc-10034        1813.2 POINT (-82.04497 36.09917)\n## 9  finsync_nrs_nc-10041        1141.3 POINT (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049        1444.7 POINT (-77.96322 34.58249)\nggplot() +\n  geom_sf(data = sf_nc_county,       # Plot county boundaries as a grey background\n          fill = \"grey\") + \n  geom_sf(data = sf_site_prec,       # Plot survey points colored by precipitation\n          aes(color = precipitation)) +\n  scale_color_viridis_c() +          # Apply a perceptually uniform color scale\n  theme_bw()                        # Use a clean black-and-white theme"},{"path":"vector-raster-interactions.html","id":"zonal-statistics","chapter":"5 Vector-Raster Interactions","heading":"5.3 Zonal Statistics","text":"Zonal statistics GIS refers process summarizing raster values within boundaries defined zones, typically represented polygons.\nexample, might calculate average precipitation within watershed administrative boundary.\ncommonly done overlaying polygon features onto raster layer computing summary statistics (e.g., mean, sum, min, max) raster cells fall within polygon.","code":""},{"path":"vector-raster-interactions.html","id":"traditional-approach","chapter":"5 Vector-Raster Interactions","heading":"5.3.1 Traditional approach","text":"exactextractr package provides suite efficient precise tools performing zonal statistics, particularly working raster polygon data.\nfollowing example, use exact_extract() calculate mean precipitation within county polygon.However, performing zonal statistics, critical ensure raster vector layers use projected CRS – geographic one (like WGS 84 degrees).\nzonal statistics summarize values areas, accurate area-based calculations require linear units (e.g., meters), meaningful projected CRS.example, first reproject county polygon layer sf_nc_county WGS 84 / UTM zone 17N (EPSG:32617), projected CRS appropriate central eastern North Carolina.\n, use terra::project() reproject raster layer spr_prec_nc match polygon layer’s CRS.\nmethod = \"bilinear\" option used resampling continuous raster data (precipitation)2, providing smoother interpolation.layers now common projected CRS, can proceed zonal statistics, ensuring area-weighted calculations geometrically accurate.code , exact_extract() used calculate mean precipitation within county polygon (sf_nc_county_proj) reprojected raster spr_prec_nc_proj.\nargument fun = \"mean\" specifies want compute simple mean raster cell values overlap polygon.\nappend_cols = TRUE option ensures original attributes sf_nc_county_proj object retained output, makes easier link results back spatial features.Although output exact_extract() regular data frame (sf object), can easily merge computed statistics back original spatial data using left_join()3.\nallows us retain spatial geometry county polygons adding precipitation values new attributes.example , assume original sf object (sf_nc_county) extracted results (df_prec_county) share common identifier column named county.following plot uses ggplot2 visualize mean precipitation values calculated county.\ngeom_sf() layer draws county boundaries sf_nc_county_prec object, aes(color = precipitation) argument maps precipitation values color gradient.","code":"\nsf_nc_county_proj <- st_transform(sf_nc_county,\n                                  crs = 32617)\n\nspr_prec_nc_proj <- terra::project(x = spr_prec_nc, \n                                   y = crs(sf_nc_county_proj),\n                                   method = \"bilinear\") \n# NOTE: `progress = FALSE` turns off the progress bar for cleaner output\n(df_prec_county <- exact_extract(x = spr_prec_nc_proj,\n                                 y = sf_nc_county_proj,\n                                 fun = \"mean\",\n                                 append_cols = TRUE,\n                                 progress = FALSE) %>% \n   as_tibble() %>% # convert to tibble\n   rename(precipitation = mean)) # rename the output column)## # A tibble: 100 × 2\n##    county      precipitation\n##    <chr>               <dbl>\n##  1 ashe                1366.\n##  2 alleghany           1369.\n##  3 surry               1217.\n##  4 currituck           1281.\n##  5 northampton         1179.\n##  6 hertford            1239.\n##  7 camden              1299.\n##  8 gates               1275.\n##  9 warren              1140.\n## 10 stokes              1218.\n## # ℹ 90 more rows\n(sf_nc_county_prec <- sf_nc_county %>% \n   left_join(df_prec_county,\n             by = \"county\"))## Simple feature collection with 100 features and 2 fields\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##         county precipitation                       geometry\n## 1         ashe      1365.949 MULTIPOLYGON (((-81.47258 3...\n## 2    alleghany      1368.901 MULTIPOLYGON (((-81.23971 3...\n## 3        surry      1216.966 MULTIPOLYGON (((-80.45614 3...\n## 4    currituck      1281.308 MULTIPOLYGON (((-76.00863 3...\n## 5  northampton      1178.707 MULTIPOLYGON (((-77.21736 3...\n## 6     hertford      1239.493 MULTIPOLYGON (((-76.74474 3...\n## 7       camden      1299.447 MULTIPOLYGON (((-76.00863 3...\n## 8        gates      1275.414 MULTIPOLYGON (((-76.56218 3...\n## 9       warren      1139.996 MULTIPOLYGON (((-78.30849 3...\n## 10      stokes      1217.916 MULTIPOLYGON (((-80.02545 3...\nggplot() +\n  geom_sf(data = sf_nc_county_prec,\n          aes(fill = precipitation)) +\n  scale_fill_viridis_c() +\n  theme_bw()"},{"path":"vector-raster-interactions.html","id":"alternative-approach","chapter":"5 Vector-Raster Interactions","heading":"5.3.2 Alternative approach","text":"example involved multiple steps reproject raster polygon layers common projected CRS, necessary accurate area-based calculations.However, exact_extract() function provides convenient alternative avoids need explicit reprojection.\nspecifying fun = \"weighted_mean\" weights = \"area\", instruct function calculate mean precipitation polygon weighting raster cell’s contribution according fraction area overlaps polygon.internal weighting allows exact_extract() produce geometrically accurate results even layers remain geographic CRS (e.g., WGS 84), especially useful working global datasets reprojection impractical.numbers produced area-weighted approach without reprojection may differ slightly obtained using fully projected layers.cases, difference negligible, making approximation practical efficient; especially working across large spatial extents span multiple UTM zones even continents, choosing single appropriate projection becomes difficult.\ncases, ability exact_extract() apply area-based weights directly geographic CRS major advantage, simplifies preprocessing avoids potential distortions inappropriate projections.said, analysis requires high spatial accuracy, example, modeling fine-scale ecological processes exact area measurements critical, still recommended reproject raster vector data appropriate projected CRS.\nUltimately, decision depends scale, purpose, precision required specific application.","code":"\n(df_prec_county_alt <- exact_extract(x = spr_prec_nc,\n                                     y = sf_nc_county,\n                                     fun = \"weighted_mean\",\n                                     weights = \"area\",\n                                     append_cols = TRUE,\n                                     progress = FALSE) %>% \n   as_tibble() %>% # convert to tibble\n   rename(precipitation = weighted_mean)) # rename the output column## # A tibble: 100 × 2\n##    county      precipitation\n##    <chr>               <dbl>\n##  1 ashe                1366.\n##  2 alleghany           1369.\n##  3 surry               1217.\n##  4 currituck           1281.\n##  5 northampton         1179.\n##  6 hertford            1239.\n##  7 camden              1299.\n##  8 gates               1275.\n##  9 warren              1140.\n## 10 stokes              1218.\n## # ℹ 90 more rows"}]
