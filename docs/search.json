[{"path":"index.html","id":"about","chapter":"1 About","heading":"1 About","text":"sample book written Markdown. can use anything Pandoc’s Markdown supports; example, math equation \\(^2 + b^2 = c^2\\).","code":""},{"path":"index.html","id":"usage","chapter":"1 About","heading":"1.1 Usage","text":"bookdown chapter .Rmd file, .Rmd file can contain one (one) chapter. chapter must start first-level heading: # good chapter, can contain one (one) first-level heading.Use second-level higher headings within chapters like: ## short section ### even shorter section.index.Rmd file required, also first book chapter. homepage render book.","code":""},{"path":"index.html","id":"render-book","chapter":"1 About","heading":"1.2 Render book","text":"can render HTML version example book without changing anything:Find Build pane RStudio IDE, andFind Build pane RStudio IDE, andClick Build Book, select output format, select “formats” ’d like use multiple formats book source files.Click Build Book, select output format, select “formats” ’d like use multiple formats book source files.build book R console:render example PDF bookdown::pdf_book, ’ll need install XeLaTeX. recommended install TinyTeX (includes XeLaTeX): https://yihui.org/tinytex/.","code":"\nbookdown::render_book()"},{"path":"index.html","id":"preview-book","chapter":"1 About","heading":"1.3 Preview book","text":"work, may start local server live preview HTML book. preview update edit book save individual .Rmd files. can start server work session using RStudio add-“Preview book”, R console:","code":"\nbookdown::serve_book()"},{"path":"coordinate-systems.html","id":"coordinate-systems","chapter":"2 Coordinate Systems","heading":"2 Coordinate Systems","text":"chapter, work following packages. starting exercises, make sure run following code.","code":"\nlibrary(tidyverse)\nlibrary(sf)\nlibrary(mapview)"},{"path":"coordinate-systems.html","id":"getting-started","chapter":"2 Coordinate Systems","heading":"2.1 Getting Started","text":"Coordinate Reference Systems (CRS)? CRS define spatial data projected onto Earth’s surface—essentially, locations curved Earth represented flat map.get sense CRS works practice, let’s explore dataset fish distributions North Carolina. regional dataset contains georeferenced sampling sites using longitude latitude coordinates.’ll start reading dataset data sub-directory R project:dataset contains following columns:Let’s take quick view dataframe:Since dataframe contains longitude latitude columns, can make data georeferenced. , ’ll need use functions sf package, makes mere numbers coordinates linked CRS choice. Specifically, first convert original dataframe unique combinations logitude & latitude (= unique location) dplr::distinct() use sf::st_as_sf():looks similar tibble, version includes additional lines metadata describe key geospatial information. data frame now represents point layer (see Geometry type), includes bounding box defines longitudinal latitudinal extent (Bounding box). also specifies CRS use (Geodetic CRS). object class now includes sf.data frame converted sf class, can apply variety spatial mapping functions available R. example, can quickly visualize data using mapview::mapview() function:Fantastic — works! marks important first step toward harnessing full potential RGIS., heads-! don’t fully understand CRS use, ’s high risk performing misinformed analyses — potentially serious enough invalidate conclusions. Therefore, ’s important take time understand several key aspects CRS conducting spatial analysis. One difference Geodetic vs. Projected CRS. CRS used fish data example WGS 84, type geodetic CRS.","code":"\ndf_fish <- read_csv(\"data/data_finsync_nc.csv\")\nprint(df_fish)## # A tibble: 1,426 × 7\n##    site_id               year date         lon   lat latin              presence\n##    <chr>                <dbl> <date>     <dbl> <dbl> <chr>                 <dbl>\n##  1 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Clinostomus fundu…        1\n##  2 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Etheostoma flabel…        1\n##  3 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Hybopsis hypsinot…        1\n##  4 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Lepomis auritus           1\n##  5 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Moxostoma rupisca…        1\n##  6 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Nocomis leptoceph…        1\n##  7 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Notropis chilitic…        1\n##  8 finsync_nrs_nc-10013  2009 2009-06-27 -81.5  36.1 Semotilus atromac…        1\n##  9 finsync_nrs_nc-10014  2009 2009-06-03 -80.4  35.9 Clinostomus fundu…        1\n## 10 finsync_nrs_nc-10014  2009 2009-06-03 -80.4  35.9 Fundulus rathbuni         1\n## # ℹ 1,416 more rows\nsf_site <- df_fish %>% \n  distinct(site_id, lon, lat) %>% # get unique combinations of longitude & latitude\n  st_as_sf(coords = c(\"lon\", \"lat\"),\n           crs = 4326)\n\nprint(sf_site)## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##  * <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nclass(sf_site)## [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\nmapview(sf_site,\n        legend = FALSE)"},{"path":"coordinate-systems.html","id":"geodetic-vs.-projected","chapter":"2 Coordinate Systems","heading":"2.2 Geodetic vs. Projected","text":"CRS essential accurately representing spatial data Earth’s surface. geodetic CRS models Earth 3D ellipsoid represents locations using angular coordinates — latitude longitude. systems ideal global positioning mapping preserving true geographic coordinates important. However, represent curved surfaces spherical model, suitable accurate distance area calculations flat maps. Common examples geodetic CRS include WGS 84 (EPSG:4326), used GPS global datasets, NAD83 (EPSG:4269), widely used North America.contrast, projected CRS transforms geographic coordinates onto 2D surface using mathematical projections. allows accurate measurements distance, area, direction localized regions. Projected systems distort properties (e.g., shape, area, scale) can tailored specific mapping needs. Examples projected CRS include UTM zones (e.g., UTM Zone 17N, EPSG:32617) State Plane systems like North Carolina State Plane (EPSG:32119), optimized regional accuracy commonly used government environmental datasets.Visit website visual aids.Comparison geodetic projected CRS.Global coverage (e.g., GPS)Standard data exchange web mapsEasy interpret (lat/lon)distance, area, direction calculationsCurved surface ideal flat map operationsEnables accurate measurements (distance, area)Optimized regional analysisSupports specialized map projectionsDistorts geographic propertiesLimited specific regionsMust choose right projection purpose","code":""},{"path":"coordinate-systems.html","id":"crs-transformation","chapter":"2 Coordinate Systems","heading":"2.3 CRS transformation","text":"want perform spatial analysis data provided geodetic CRS, like fish data example? Can still calculate distances areas? first glance, might seem impossible — worries. Thanks extensive work geospatial science, now well-established methods transforming CRS.example, suppose want calculate distance two sampling sites — say, first two rows data frame.Let’s walk using projected CRS. want calculate distance two sites, can use sf::st_distance() function — transforming coordinates projected CRS1. , ’ll use UTM Zone 17N, well-suited projecting spatial data North Carolina. , ’ll apply sf::st_transform() convert geodetic CRS (e.g., WGS 84) projected CRS UTM Zone 17N based WGS 84 (EPSG:32617).Now, CRS metadata shows: Projected CRS: WGS 84 / UTM zone 17N. ’ll also notice bounding box values changed large numbers (check st_bbox(sf_ft_utm)), clearly longitude latitude.’s coordinates now expressed meters, representing positions along X Y axes 2D projected map. transformation complete, ’re ready perform geospatial analysis.Let’s start calculating distance two sampling sites:two sites \\(\\sim\\) 107 km away, shown matrix format.","code":"\nsf_ft_wgs <- sf_site %>% \n  slice(c(1, 2))\n\nprint(sf_ft_wgs)## Simple feature collection with 2 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -81.51025 ymin: 35.87616 xmax: -80.35989 ymax: 36.11188\n## Geodetic CRS:  WGS 84\n## # A tibble: 2 × 2\n##   site_id                          geometry\n##   <chr>                         <POINT [°]>\n## 1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n## 2 finsync_nrs_nc-10014 (-80.35989 35.87616)\nsf_ft_utm <- sf_ft_wgs %>% \n  st_transform(crs = 32617)\n\nprint(sf_ft_utm)## Simple feature collection with 2 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: 454077.2 ymin: 3970402 xmax: 557782.3 ymax: 3996478\n## Projected CRS: WGS 84 / UTM zone 17N\n## # A tibble: 2 × 2\n##   site_id                        geometry\n## * <chr>                       <POINT [m]>\n## 1 finsync_nrs_nc-10013 (454077.2 3996478)\n## 2 finsync_nrs_nc-10014 (557782.3 3970402)\nst_distance(sf_ft_utm)## Units: [m]\n##          1        2\n## 1      0.0 106933.3\n## 2 106933.3      0.0"},{"path":"coordinate-systems.html","id":"take-home","chapter":"2 Coordinate Systems","heading":"2.4 Take Home","text":"nutshell, geodetic CRS define locations mapped onto 3D model Earth (typically ellipsoid), preserving original latitude longitude values. Projected CRS, hand, define geographic locations transformed (“projected”) onto flat, 2D surface. However, projection can preserve spatial properties , must choose projected CRS based geometric attributes important analysis — area, distance, direction. Additionally, projected CRS typically designed use within specific geographic regions, using one outside intended area can introduce significant distortion.","code":""},{"path":"vector-data-sf-basics.html","id":"vector-data-sf-basics","chapter":"3 Vector Data (sf basics)","heading":"3 Vector Data (sf basics)","text":"chapter, work following packages. starting exercises, make sure run following code.Learning objectives:Understand data format vector dataUnderstand data format vector dataUnderstand types structures vector data (points, lines, polygons)Understand types structures vector data (points, lines, polygons)able produce map using vector dataBeing able produce map using vector dataBeing able manipulate vector dataBeing able manipulate vector data","code":"\nif (!require(pacman)) install.packages(\"packman\")\n\npacman::p_load(tidyverse,\n               sf,\n               mapview)"},{"path":"vector-data-sf-basics.html","id":"vector-data-in-gis","chapter":"3 Vector Data (sf basics)","heading":"3.1 Vector Data in GIS","text":"GIS, vector data one primary ways represent geographic features map. Vector data uses geometric shapes – specifically points, lines, polygons – model real-world objects.vector feature can also carry attribute data, stored table linked spatial features. example, polygon representing park might include attributes name, size, type vegetation.Vector data particularly useful representing clearly defined boundaries discrete features, allows detailed spatial analysis accurate map production.","code":""},{"path":"vector-data-sf-basics.html","id":"data-format","chapter":"3 Vector Data (sf basics)","heading":"3.1.1 Data Format","text":"Traditionally, vector data stored ESRI Shapefile format (.shp).\nformat originally developed ESRI 1990s remains widely used across many GIS platforms.\nHowever, somewhat cumbersome single file; shapefiles require least four associated files (.shp, .shx, .dbf, .prj) function properly. files must kept together, makes file management sharing error-prone.recent years, GeoPackage format (.gpkg) gained popularity.\nsimplifies data storage combining necessary components single, portable file.context R, even better, vector data can also saved using native RDS format (.rds).\nformat cross-platform compatible GIS software, offers advantages within R: memory efficient often results smaller file sizes.\nreasons, book primarily uses .rds format storing vector data, unless compatibility external software requires otherwise.","code":""},{"path":"vector-data-sf-basics.html","id":"readexport-vector-data","chapter":"3 Vector Data (sf basics)","heading":"3.1.2 Read/Export Vector Data","text":"Since still common share data ESRI Shapefile format, ’ll start loading .shp file R.\n, ’ll save imported data .rds format simplify later steps workflow.sf::st_read() function sf package allows import shapefiles (.shp) well standard GIS formats.\ndata loaded, can perform various operations filtering coordinate transformation.making desired changes, can export vector data using sf::st_write().\nfunction supports writing multiple formats, including Shapefile GeoPackage.\nCheck data subdirectory see exported files.use within R, often convenient save spatial data .rds format using saveRDS() function.\nformat compact efficient, making ideal storing intermediate results.\nKeep mind, however, .rds files compatible GIS software, ’ll need convert .shp .gpkg others using common GIS platforms.reload saved .rds file R, use readRDS() function.","code":"\n# read a shapefile (e.g., ESRI Shapefile format)\nsf_nc_county <- st_read(dsn = \"data/sf_nc_county.shp\")\n# save as shapefile (overwrites by setting append = FALSE)\nst_write(sf_nc_county, \n         dsn = \"data/sf_nc_county.shp\",\n         append = FALSE)\n\n# save as Geopackage (overwrites by setting append = FALSE)\nst_write(sf_nc_county, \n         dsn = \"data/sf_nc_county.gpkg\",\n         append = FALSE)\n# save as an RDS file (compact and efficient for use within R)\nsaveRDS(sf_nc_county,\n        file = \"data/sf_nc_county.rds\")\n# read from an RDS file\nsf_nc_county <- readRDS(file = \"data/sf_nc_county.rds\")"},{"path":"vector-data-sf-basics.html","id":"point","chapter":"3 Vector Data (sf basics)","heading":"3.2 Point","text":"Points represent discrete locations area length, location weather station, tree, city. point pair coordinates (latitude longitude x y) indicate position.sample data used Chapter 2 example point vector layer. Let’s take closer look dataset (saved data/sf_finsync_nc.rds shared repository).examine geometry column, ’ll see contains pairs latitude longitude values notation <POINT [°]>, specify location site. Using geographic information, visualized survey sites map Chapter 2.1. can map data mapview::mapview() function:","code":"\n(sf_site <- readRDS(\"data/sf_finsync_nc.rds\"))## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##    <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nmapview(sf_site,\n        col.regions = \"black\", # point's fill color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"line","chapter":"3 Vector Data (sf basics)","heading":"3.3 Line","text":"Lines (also called polylines) represent linear features roads, rivers, trails. line consists sequence connected points may include curves bends.\nLines length, area.Stream lines example line geometries.\nuse sample dataset stored data/sf_stream.rds, illustrate stream networks within Guilford county, NC. can load inspect R follows:contrast point vector layer introduced earlier, dataset’s geometry column contains notation LINESTRING, indicating features represent linear geometries—specifically, stream segments.\nLet’s visualize data better understand structure:","code":"\n(sf_str <- readRDS(\"data/sf_stream.rds\"))## Simple feature collection with 5012 features and 1 field\n## Geometry type: LINESTRING\n## Dimension:     XY\n## Bounding box:  xmin: -80.04671 ymin: 35.9001 xmax: -79.53284 ymax: 36.25706\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##                          geometry       fid\n## 1  LINESTRING (-79.90748 36.18... fid000001\n## 2  LINESTRING (-79.89768 36.20... fid000002\n## 3  LINESTRING (-79.94756 36.15... fid000003\n## 4  LINESTRING (-79.94152 36.25... fid000004\n## 5  LINESTRING (-79.94206 36.20... fid000005\n## 6  LINESTRING (-79.90003 36.18... fid000006\n## 7  LINESTRING (-79.94737 36.20... fid000007\n## 8  LINESTRING (-79.87595 36.18... fid000008\n## 9  LINESTRING (-79.88022 36.25... fid000009\n## 10 LINESTRING (-79.94859 36.25... fid000010\nmapview(sf_str,\n        color = \"steelblue\", # line's color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"polygon","chapter":"3 Vector Data (sf basics)","heading":"3.4 Polygon","text":"Polygons represent areas lakes, parks, country boundaries. polygon formed closed sequence lines define perimeter, allowing enclose space area shape.\nexample, ’ll use county-level polygon data North Carolina:geometry column, ’ll notice notation MULTIPOLYGON, indicates feature consists one connected polygons.\nclassified polygon vectors GIS commonly used represent areas defined boundaries. Let’s visualize polygons well:","code":"\n(sf_nc_county <- readRDS(\"data/sf_nc_county.rds\"))## Simple feature collection with 100 features and 1 field\n## Geometry type: MULTIPOLYGON\n## Dimension:     XY\n## Bounding box:  xmin: -84.32377 ymin: 33.88212 xmax: -75.45662 ymax: 36.58973\n## Geodetic CRS:  WGS 84\n## First 10 features:\n##         county                       geometry\n## 1         ashe MULTIPOLYGON (((-81.47258 3...\n## 2    alleghany MULTIPOLYGON (((-81.23971 3...\n## 3        surry MULTIPOLYGON (((-80.45614 3...\n## 4    currituck MULTIPOLYGON (((-76.00863 3...\n## 5  northampton MULTIPOLYGON (((-77.21736 3...\n## 6     hertford MULTIPOLYGON (((-76.74474 3...\n## 7       camden MULTIPOLYGON (((-76.00863 3...\n## 8        gates MULTIPOLYGON (((-76.56218 3...\n## 9       warren MULTIPOLYGON (((-78.30849 3...\n## 10      stokes MULTIPOLYGON (((-80.02545 3...\nmapview(sf_nc_county,\n        col.regions = \"grey\", # polygon's fill color\n        legend = FALSE) # disable legend"},{"path":"vector-data-sf-basics.html","id":"mapping","chapter":"3 Vector Data (sf basics)","heading":"3.5 Mapping","text":"visualize three types vector data—points, lines, polygons—together, can use ggplot2 package geom_sf() function, natively supports spatial features.’ll start plotting just polygon layer show county boundaries:Next, add line layer, represents stream networks, top county polygons:Finally, add point layer map, marks survey sites. completes map showing three vector types together:","code":"\nggplot() +\n  geom_sf(data = sf_nc_county)\nggplot() +\n  geom_sf(data = sf_nc_county) +\n  geom_sf(data = sf_str)\nggplot() +\n  geom_sf(data = sf_nc_county) +\n  geom_sf(data = sf_str) +\n  geom_sf(data = sf_site)"},{"path":"vector-data-sf-basics.html","id":"spatial-data-manipulation","chapter":"3 Vector Data (sf basics)","heading":"3.6 Spatial Data Manipulation","text":"map created earlier provides good overview, may appear odd stream network available Guilford County, yet layers (survey sites county boundaries) span entire state.\nbetter align spatial representation, might want focus Guilford County across layers.One major benefits using R GIS analysis spatial features can manipulated just like regular data frames.\nkind spatial subsetting also possible platforms like ArcGIS QGIS, often involves tedious click--save workflows, personally try avoid.narrow survey sites fall within Guilford County, can use sf::st_join() function sf package.\nfunction performs spatial join, associating attributes one layer (e.g., counties) another (e.g., point locations) based geographic overlap., overlay sf_site (survey sites) sf_nc_county (county polygons) attach county information point:original sf_site data, column identifying county site:running st_join(), resulting object sf_site_join now includes additional attributes county layer—notably, county column:column isn’t randomly assigned; reflects actual geographic relationship: survey site inherits attributes county polygon falls within, based spatial coordinates.Now survey site county identifier, can easily subset points located within Guilford County using familiar tidyverse syntax:can also extract just Guilford County polygon full county dataset:filtered layers, can re-create map – time focusing exclusively Guilford County associated stream network survey sites:wish, can customize colors layer apply clean base theme enhance appearance:","code":"\nsf_site_join <- st_join(x = sf_site, # base layer\n                        y = sf_nc_county) # overlaying layer\nprint(sf_site)## Simple feature collection with 122 features and 1 field\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 2\n##    site_id                          geometry\n##    <chr>                         <POINT [°]>\n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188)\n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616)\n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379)\n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822)\n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553)\n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467)\n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119)\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917)\n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365)\n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249)\n## # ℹ 112 more rows\nprint(sf_site_join)## Simple feature collection with 122 features and 2 fields\n## Geometry type: POINT\n## Dimension:     XY\n## Bounding box:  xmin: -84.02452 ymin: 34.53497 xmax: -76.74611 ymax: 36.54083\n## Geodetic CRS:  WGS 84\n## # A tibble: 122 × 3\n##    site_id                          geometry county     \n##  * <chr>                         <POINT [°]> <chr>      \n##  1 finsync_nrs_nc-10013 (-81.51025 36.11188) wilkes     \n##  2 finsync_nrs_nc-10014 (-80.35989 35.87616) davidson   \n##  3 finsync_nrs_nc-10020 (-81.74472 35.64379) burke      \n##  4 finsync_nrs_nc-10023  (-82.77898 35.6822) buncombe   \n##  5 finsync_nrs_nc-10024 (-77.75384 35.38553) greene     \n##  6 finsync_nrs_nc-10027 (-83.69678 35.02467) clay       \n##  7 finsync_nrs_nc-10029 (-80.65668 35.16119) mecklenburg\n##  8 finsync_nrs_nc-10034 (-82.04497 36.09917) avery      \n##  9 finsync_nrs_nc-10041 (-80.46558 35.04365) union      \n## 10 finsync_nrs_nc-10049 (-77.96322 34.58249) pender     \n## # ℹ 112 more rows\nsf_site_guilford <- sf_site_join %>% \n  filter(county == \"guilford\")\nsf_nc_guilford <- sf_nc_county %>% \n  filter(county == \"guilford\")\nggplot() +\n  geom_sf(data = sf_nc_guilford) +\n  geom_sf(data = sf_str) +\n  geom_sf(data = sf_site_guilford)\nggplot() +\n  geom_sf(data = sf_nc_guilford) +\n  geom_sf(data = sf_str,\n          color = \"steelblue\") +\n  geom_sf(data = sf_site_guilford,\n          color = \"salmon\") +\n  theme_bw()"},{"path":"vector-data-sf-basics.html","id":"geometric-analysis","chapter":"3 Vector Data (sf basics)","heading":"3.7 Geometric Analysis","text":"","code":""},{"path":"vector-data-sf-basics.html","id":"transform-crs","chapter":"3 Vector Data (sf basics)","heading":"3.7.1 Transform CRS","text":"","code":""},{"path":"vector-data-sf-basics.html","id":"geometric-attributes","chapter":"3 Vector Data (sf basics)","heading":"3.7.2 Geometric attributes","text":"","code":""}]
